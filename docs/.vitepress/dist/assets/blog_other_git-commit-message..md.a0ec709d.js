import{_ as e,c as t,o as i,a}from"./app.b9d41ebe.js";const _=JSON.parse('{"title":"Git Commit Message","description":"","frontmatter":{},"headers":[],"relativePath":"blog/other/git-commit-message..md"}'),o={name:"blog/other/git-commit-message..md"},l=a('<h1 id="git-commit-message" tabindex="-1">Git Commit Message <a class="header-anchor" href="#git-commit-message" aria-hidden="true">#</a></h1><ol><li><p>Specify the type of commit:</p><ul><li>feat: The new feature you&#39;re adding to a particular application</li><li>fix: A bug fix</li><li>style: Feature and updates related to styling</li><li>refactor: Refactoring a specific section of the codebase</li><li>test: Everything related to testing</li><li>docs: Everything related to documentation</li><li>chore: Regular code maintenance.[ You can also use emojis to represent commit types]</li></ul></li><li><p>Separate the subject from the body with a blank line</p></li><li><p>Your commit message should not contain any whitespace errors</p></li><li><p>Remove unnecessary punctuation marks</p></li><li><p>Do not end the subject line with a period</p></li><li><p>Capitalize the subject line and each paragraph</p></li><li><p>Use the imperative mood in the subject line</p></li><li><p>Use the body to explain what changes you have made and why you made them.</p></li><li><p>Do not assume the reviewer understands what the original problem was, ensure you add it.</p></li><li><p>Do not think your code is self-explanatory</p></li><li><p>Follow the commit convention defined by your team</p></li></ol>',2),s=[l];function n(r,c,p,m,d,h){return i(),t("div",null,s)}const g=e(o,[["render",n]]);export{_ as __pageData,g as default};
