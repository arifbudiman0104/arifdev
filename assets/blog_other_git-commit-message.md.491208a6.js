import{_ as e,c as t,o as i,a}from"./app.e675e5c7.js";const g=JSON.parse('{"title":"Git Commit Message","description":"","frontmatter":{},"headers":[],"relativePath":"blog/other/git-commit-message.md"}'),o={name:"blog/other/git-commit-message.md"},s=a('<h1 id="git-commit-message" tabindex="-1">Git Commit Message <a class="header-anchor" href="#git-commit-message" aria-hidden="true">#</a></h1><p>Source: <a href="https://www.freecodecamp.org/news/writing-good-commit-messages-a-practical-guide/" target="_blank" rel="noreferrer">freecodecamp - How to Write Good Commit Message</a></p><ol><li>Specify the type of commit: <ul><li>feat: The new feature you&#39;re adding to a particular application</li><li>fix: A bug fix</li><li>style: Feature and updates related to styling</li><li>refactor: Refactoring a specific section of the codebase</li><li>test: Everything related to testing</li><li>docs: Everything related to documentation</li><li>chore: Regular code maintenance.[ You can also use emojis to represent commit types]</li></ul></li><li>Separate the subject from the body with a blank line</li><li>Your commit message should not contain any whitespace errors</li><li>Remove unnecessary punctuation marks</li><li>Do not end the subject line with a period</li><li>Capitalize the subject line and each paragraph</li><li>Use the imperative mood in the subject line</li><li>Use the body to explain what changes you have made and why you made them.</li><li>Do not assume the reviewer understands what the original problem was, ensure you add it.</li><li>Do not think your code is self-explanatory</li><li>Follow the commit convention defined by your team</li></ol>',3),r=[s];function l(n,c,m,d,h,p){return i(),t("div",null,r)}const _=e(o,[["render",l]]);export{g as __pageData,_ as default};
